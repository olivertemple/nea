{"version":3,"sources":["components/DisplayNode.jsx","components/GeneratorInfo.jsx","components/SolverInfo.jsx","components/DisplayGrid.jsx","components/Settings.jsx","components/Menu.jsx","components/MenuKey.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayNode","props","state","style","handelDragStart","bind","handelDragLeave","handelDragOver","handelDrop","this","setDragObject","start","end","setState","pos","e","preventDefault","backgroundColor","classList","draggable","wallLeft","push","wallBottom","type","filter","x","index","animation","animationDelay","speed","className","join","onDragStart","onDrop","onDragOver","onDragLeave","React","Component","GeneratorInfo","info","title","generator","SolverInfo","solver","heuristic","DisplayGrid","dragObject","renderTable","setStart","setEnd","Array","from","grid","height","keys","map","_","i","width","j","nodes","padding","generateAlgorithm","solveAlgorithm","Settings","show","handelSizeChange","setHeuristic","handleClickOutside","document","addEventListener","removeEventListener","event","domNode","ReactDOM","findDOMNode","contains","target","value","setSize","size","min","onChange","name","id","defaultValue","max","step","setSpeed","onClick","renderSettings","Menu","setAlgorithm","generate","solve","setSolve","clearGrid","MenuKey","Footer","marginTop","marginLeft","color","href","App","algorithm","solved","maze","fetchGrid","solveGrid","should_solve","node","a","clear_node_index","then","Promise","resolve","fetch","json","alert","method","body","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.591d7a0d.chunk.js","sourcesContent":["import React from \"react\"\r\nexport default class DisplayNode extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            style:{}\r\n        }\r\n        //bind the methods to the object so that the \"this\" keyword refers to the object no matter where the method is called from\r\n        this.handelDragStart = this.handelDragStart.bind(this);\r\n        this.handelDragLeave = this.handelDragLeave.bind(this);\r\n        this.handelDragOver = this.handelDragOver.bind(this);\r\n        this.handelDrop = this.handelDrop.bind(this);\r\n    }\r\n    handelDragStart(){//set the type of node that is being dragged\r\n        this.props.setDragObject(this.start ? \"start\" : this.end ? \"end\" : \"\")\r\n    }\r\n    handelDrop(){//move the node that was being dragged to the new position\r\n        this.setState({style:{}});\r\n        this.props.handelDrop(this.props.pos)\r\n    }\r\n    handelDragOver(e){//when another node is dragged over this node, set the style of the node to be pink\r\n        e.preventDefault();\r\n        this.setState({\r\n            style:{\r\n                backgroundColor:\"pink\"\r\n            }\r\n        })\r\n    }\r\n    handelDragLeave(){//remove the pink style when the node is no longer being dragged over\r\n        this.setState({\r\n            style:{}\r\n        })\r\n    }\r\n    render(){//render the node as a table cell\r\n        //generate a list of css classes for this node\r\n        this.classList = [\"node\"];\r\n        //set default values for the node\r\n        this.draggable = false;\r\n        this.start = false;\r\n        this.end = false;\r\n        //add walls to the node classList\r\n        if (this.props.wallLeft){\r\n            this.classList.push(\"wall_left\")\r\n        }\r\n        if (this.props.wallBottom){\r\n            this.classList.push(\"wall_bottom\")\r\n        }\r\n        //add path to node classList\r\n        if (this.props.type === \"path\"){\r\n            this.classList.push(\"node_path\")\r\n        }else{\r\n            //Remove the \"node_path\" item from the classList if it isn't a path, as when maze is resolved the nodes would remain a path node if it was a path node before.\r\n            this.classList.filter(x => {return x !== \"node_path\"})\r\n        }\r\n        //add attributes for the start node or remove them if this node is no longer the start node\r\n        if (this.props.pos[0] === this.props.start[0] && this.props.pos[1] === this.props.start[1]){\r\n            this.classList.push(\"node_start\")\r\n            this.draggable = true\r\n            this.start = true\r\n        }else{\r\n            this.classList.filter(x => {return x !== \"node_start\"})\r\n            this.start = false\r\n        }\r\n        //add attributes for the end node or remove them if this node is no longer the end node\r\n        if (this.props.pos[0] === this.props.end[0] && this.props.pos[1] === this.props.end[1]){\r\n            this.classList.push(\"node_end\")\r\n            this.draggable = true\r\n            this.end=true\r\n        }else{\r\n            this.classList.filter(x => {return x !== \"node_end\"})\r\n            this.end=false\r\n        }\r\n\r\n        if(this.props.index){//Each node is given an index when it is visited so the order of the visited nodes can be visualized\r\n            if (this.props.type !== \"path\"){//Add css animations for to show the visited nodes\r\n                this.state.style = {\r\n                    animation: `visit_node 2s linear forwards`,\r\n                    animationDelay: `${this.props.index*this.props.speed}s`\r\n                }\r\n            }else{//Add css animations for to show the path nodes\r\n                this.state.style = {\r\n                    animation: \"visit_node_path 2s linear forwards\",\r\n                    animationDelay: `${this.props.index*this.props.speed}s`\r\n                } \r\n            }\r\n        }else{\r\n            //removes the colour if the node is no longer visited after the maze is solved again\r\n            if (!this.state.style.backgroundColor){\r\n                this.state.style = {}\r\n            }\r\n        }\r\n        return(\r\n            <td style={this.state.style} className={this.classList.join(\" \")} draggable={this.draggable} onDragStart={this.handelDragStart} onDrop={this.handelDrop} onDragOver={this.handelDragOver} onDragLeave={this.handelDragLeave}>\r\n            </td>\r\n        )\r\n    }\r\n}","export default function GeneratorInfo(props) {\r\n    let info;\r\n    let title;\r\n    if (props.generator === \"prims\"){\r\n        title = \"Prim's Algorithm\"\r\n        info = \"Prim's algorithm starts at one point, and expands the graph by removing walls from the graph that connect the current node to the closest unvisited node. The algorithm continues until all nodes are connected.\"\r\n    }else if (props.generator === \"recursive_backtracking\"){\r\n        title = \"Recursive Backtracking\"\r\n        info = \"Recursive backtracking works by choosing a random wall to remove that connects the current node to another node that is not in the maze. The algorithm continues until all adjacent nodes are in the maze, and then it backtracks and repeats the process.\"\r\n    }\r\n    return(\r\n        <div className=\"info\">\r\n            <h1>{title}</h1>\r\n            <p>\r\n                {info}\r\n            </p>\r\n        </div>\r\n    )\r\n}","export default function SolverInfo(props) {\r\n    let info;\r\n    let title;\r\n    if (props.solver === \"dijkstra\"){\r\n        title = \"Dijkstra's Algorithm\"\r\n        info = \"Dijkstra's algorithm works by expanding outwards from the start node, adding a distance from the start to each visited node, until the end node is found. The algorithm then works backwards from the end node, choosing the node with the smallest distance at all opportunities. It is guaranteed to find the shortest path.\"\r\n    }else if (props.solver === \"dfs\"){\r\n        title = \"Depth First Search\"\r\n        info = \"Depth First Search works by searching from a start node and fully exploring a path before moving on to the next node. It uses a stack to store the nodes that it needs to explore. It is not guaranteed to find the shortest path.\"\r\n    }else if (props.solver === \"bfs\"){\r\n        title = \"Breadth First Search\"\r\n        info = \"Depth First Search works by searching from a start node and expanding outwards radially until it reaches the end node. It uses a queue to store the nodes that it needs to explore. It is not guaranteed to find the shortest path.\"\r\n    }else if (props.solver === \"greedy\"){\r\n        title = \"Greedy\"\r\n        info = \"The greedy algorithm works by finding the node with the lowest heuristic value and expanding it. It is a greedy algorithm because it will always choose the node with the lowest heuristic value. It is not guaranteed to find the shortest path.\"\r\n        if (props.heuristic === \"manhattan\"){\r\n            info += \"The manhattan heuristic is calculated by |x1 - x2| + |y1 - y2|.\"\r\n        }else if (props.heuristic === \"euclidean\"){\r\n            info += \"The euclidean heuristic is calculated by sqrt(x1 - x2)^2 + (y1 - y2)^2.\"\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"info\">\r\n            <h1>{title}</h1>\r\n            <p>\r\n                {info}\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport DisplayNode from \"./DisplayNode\";\r\nimport GeneratorInfo from \"./GeneratorInfo\";\r\nimport SolverInfo from \"./SolverInfo\";\r\nexport default class DisplayGrid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dragObject: \"\"\r\n        }\r\n        //bind the methods to the object so that the \"this\" keyword refers to the object no matter where the method is called from\r\n        this.renderTable = this.renderTable.bind(this);\r\n        this.handelDrop = this.handelDrop.bind(this);\r\n        this.setDragObject = this.setDragObject.bind(this);\r\n    }\r\n    handelDrop(pos){//move the node that was being dragged to the new position\r\n        switch (this.state.dragObject){\r\n            case \"start\":\r\n                this.props.setStart(pos)\r\n                break;\r\n            case \"end\":\r\n                this.props.setEnd(pos)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    setDragObject(type){//set weather start or end node is being dragged\r\n        this.setState({\r\n            dragObject:type\r\n        })\r\n    }\r\n    renderTable(){//render the grid as a table\r\n        return(\r\n            <table>\r\n                <tbody className=\"column\">\r\n                    {Array.from(Array(this.props.grid.height).keys()).map((_, i) => {//iterate through the rows of the grid\r\n                        return(\r\n                                <tr className={`row wall_right ${i === 0 ? \"wall_top\" : \"\"}`} key={i}>\r\n                                    {Array.from(Array(this.props.grid.width).keys()).map((_, j) => {//iterate through the nodes in each row\r\n                                        return(\r\n                                            <DisplayNode \r\n                                                key={j}\r\n                                                wallLeft={this.props.grid.grid[i][j].wallLeft} //bool: is there a wall to the left of this node\r\n                                                wallBottom={this.props.grid.grid[i][j].wallBottom} //bool: is there a wall below this node\r\n                                                pos={[i, j]} //position of the node\r\n                                                start={this.props.nodes.start} //position of the start node\r\n                                                end={this.props.nodes.end} //position of the end node\r\n                                                handelDrop = {this.handelDrop} //callback function to move the start or end node to a new position\r\n                                                setDragObject={this.setDragObject} // callback function to set weather the start or end node is being dragged\r\n                                                type={this.props.grid.grid[i][j].type} //type of node\r\n                                                index={this.props.grid.grid[i][j].index} //index of the node for visualization\r\n                                                speed={this.props.speed} //speed of the animation\r\n                                            /> \r\n                                        )\r\n                                    })}\r\n                                </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n        \r\n    }\r\n    render(){\r\n        //If there is a grid, render it, else show a message\r\n        if (this.props.grid){\r\n            return(\r\n                <div className=\"grid\" style={{padding:10}}>\r\n                    <GeneratorInfo generator={this.props.generateAlgorithm}/>\r\n                    <this.renderTable />\r\n                    <SolverInfo solver={this.props.solveAlgorithm} heuristic={this.props.heuristic}/>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"grid message column\">\r\n                    <h1>No grid to display</h1>\r\n                    <h2>Check your internet connection</h2>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n\r\nexport default class Settings extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            heuristic: \"euclidean\"//set default heuristic to euclidean\r\n        }\r\n        //bind the methods to the object so that the \"this\" keyword refers to the object no matter where the method is called from\r\n        this.handelSizeChange = this.handelSizeChange.bind(this);\r\n        this.setHeuristic = this.setHeuristic.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n    componentDidMount(){//add an event listener to the document so that the settings dropdown menu can be hidden if the user clicks outside of it\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n    componentWillUnmount(){//remove the event listener from the document when the component is removed from the DOM\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n    handleClickOutside(event){//hide the settings dropdown menu if the user clicks outside of it\r\n        const domNode = ReactDOM.findDOMNode(this);\r\n        if (!domNode || !domNode.contains(event.target)) {\r\n            this.setState({show: false});\r\n        }\r\n    }\r\n    handelSizeChange(e){//change the size of the grid when it is changed in the settings\r\n        let value = e.target.value;\r\n        this.props.setSize({height:value, width:value})\r\n    }\r\n    setHeuristic(heuristic){//set the heuristic to the selected heuristic\r\n        this.setState({\r\n            heuristic: heuristic\r\n        })\r\n        this.props.setHeuristic(heuristic)\r\n    }\r\n    renderSettings(){//render the settings dropdown menu\r\n        return(\r\n            <div className=\"settings_container\">\r\n                <div className=\"column\">\r\n                    <p>Size</p>\r\n                    <input className=\"text_input\" type=\"number\" value={this.props.size.height} min={1} onChange={e => this.handelSizeChange(e)}/>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <p>Greedy Heuristic</p>\r\n                     <select className=\"algorithms\" name=\"heuristic\" id=\"algorithms\" onChange={(e) => {this.setHeuristic(e.target.value)}} value={this.state.heuristic}>\r\n                        <option value=\"manhattan\">Manhattan</option>\r\n                        <option value=\"euclidean\">Euclidean</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <p>Speed</p>\r\n                    <input type=\"range\" defaultValue={this.props.speed} min={0.01} max={0.3} step={0.01} onChange={(e) => {this.props.setSpeed(e.target.value)}} />    \r\n                </div> \r\n               \r\n            </div>\r\n        )\r\n    }\r\n    render(){//render the settings button and the settings dropdown menu if it is clicked\r\n        return(\r\n            <div>\r\n                <button className=\"button settings\" onClick={() => {this.setState({show:!this.state.show})}}>Settings</button>\r\n                {\r\n                    //show the settings dropdown menu if the button is clicked\r\n                    this.state.show ? this.renderSettings() : null \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Settings from './Settings';\r\nexport default function Menu(props) {//Menu bar for the app \r\n        return(\r\n            <div className=\"menu\">\r\n                <Settings\r\n                    size={props.size}//size of the maze\r\n                    setSize={props.setSize}//callback to set the size of the maze from the settings\r\n                    setHeuristic={props.setHeuristic}//callback to set the heuristic from the settings\r\n                    setSpeed={props.setSpeed}//callback to set the speed from the settings\r\n                    speed={props.speed}//speed of the animation \r\n                />\r\n                <select className=\"algorithms\" name=\"algorithms\" id=\"algorithms\" onChange={(e) => {props.setAlgorithm(e.target.value)}}>\r\n                    <option value=\"select\">Select Generating Algorithm</option>\r\n                    <option value=\"prims\">Prims</option>\r\n                    <option value=\"recursive_backtracking\">recursive backtracking</option>\r\n                </select>\r\n                <button className=\"button\" onClick={props.generate}>Generate</button>\r\n                <button className=\"button\" onClick={props.solve}>Solve</button>\r\n                <select className=\"algorithms\" name=\"algorithms\" id=\"algorithms\" onChange={(e) => {props.setSolve(e.target.value)}}>\r\n                    <option value=\"select\">Select Solving Algorithm</option>\r\n                    <option value=\"dijkstra\">Dijkstra</option>\r\n                    <option value=\"dfs\">Depth First Search</option>\r\n                    <option value=\"bfs\">Breadth First Search</option>\r\n                    <option value=\"greedy\">Greedy</option>\r\n                </select>\r\n                <button className=\"button clear\" onClick={props.clearGrid}>Reset</button>\r\n            </div>\r\n        )\r\n}","import React from \"react\";\r\n\r\nexport default function MenuKey(props){//key for showing the different types of node\r\n        return(\r\n            <div className=\"key\">\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_start\"></div>\r\n                    <p>Start Node</p>\r\n                </div>\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_end\"></div>\r\n                    <p>Finish Node</p>\r\n                </div>\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_path\"></div>\r\n                    <p>Path Node</p>\r\n                </div>\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_visited_node\"></div>\r\n                    <p>Visited Node</p>\r\n                </div>\r\n            </div>\r\n        )\r\n}","export default function Footer() {\r\n  return (\r\n    <div className=\"row\" style={{marginTop:-25, marginLeft:25, color:\"grey\"}}>\r\n        <p><a className=\"link\" href=\"https://github.com/olivertemple/nea\">GitHub</a> | This website was created by Oliver Temple for a Computer Science A Level NEA</p>\r\n    </div>\r\n  )\r\n  }","import './App.css';\nimport { Component } from 'react';\nimport DisplayGrid from './components/DisplayGrid';\nimport Menu from './components/Menu';\nimport MenuKey from './components/MenuKey';\nimport Footer from './components/Footer';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      grid: null,//the grid of nodes\n      algorithm: null,//algorithm for generating the maze\n      solve:null,//algorithm for solving the maze\n      nodes:{\n        start: [0,0],//position of the start node\n        end: [null, null]//position of the end node\n      },\n      size: {//size of the maze\n        width:15,\n        height:15\n      },\n      heuristic: \"euclidean\",\n      speed:0.1\n    }\n\n    this.solved = false;\n    this.maze = false;\n    //bind the methods to the object so that the \"this\" keyword refers to the object no matter where the method is called from\n    this.fetchGrid = this.fetchGrid.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.clearGrid = this.clearGrid.bind(this);\n    this.setSolve = this.setSolve.bind(this);\n    this.solveGrid = this.solveGrid.bind(this);\n    this.setSize = this.setSize.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.should_solve = this.should_solve.bind(this);\n    this.setHeuristic = this.setHeuristic.bind(this);\n    this.setSpeed = this.setSpeed.bind(this);\n  }\n\n  componentDidMount(){\n    //generate a new maze empty when the page loads\n    this.clearGrid();\n  }\n\n  setHeuristic(heuristic){//set the heuristic for the greedy algorithm\n    this.setState({heuristic: heuristic});\n  }\n  setSpeed(speed){//set the speed of the animation\n    this.clearGrid();\n    this.setState({speed: speed});\n  }\n  setSize(size){//set the size of the grid when changed in settings\n    this.setState({\n      size: size\n    }, () => {//setState is asynchronous, so we need to wait for it to finish before running the following code \n      if (size.width > 0 && size.height > 0){//if the size is valid, generate a new maze\n        this.clearGrid();\n      }\n    })\n  }\n  setStart(node){//set the start node\n    this.setState({\n      nodes:{\n        start: node,\n        end: this.state.nodes.end\n      }\n    }, () => {//setState is asynchronous, so we need to wait for it to finish before running the following code\n      this.should_solve()//solve the maze again if it is already solved\n    })\n  }\n  setEnd(node){//set the end node\n    this.setState({\n      nodes:{\n        start: this.state.nodes.start,\n        end: node\n      }\n    }, () => {//setState is asynchronous, so we need to wait for it to finish before running the following code\n      this.should_solve()//solve the maze again if it is already solved\n    })\n  }\n\n  async should_solve(){//if the maze is already solved, then solve again. Only run when the start or end nodes are changed\n    if (this.solved){\n      this.clear_node_index()//clear the index of the nodes, as the maze is being solved again\n      .then(() => {\n        this.solveGrid();\n      })\n    }\n  }\n\n  async clear_node_index(){//clear the index of the nodes so that the maze can be solved again\n    return new Promise(resolve => {//since there are asynchronous calls, we need to wait for them to finish before running the code after the clear_node_index function, hence we use a promise that is resolved once this code is finished\n      let grid = this.state.grid.grid\n      //iterate through the grid and clear the index of the nodes\n      for (let i=0; i<this.state.size.height; i++){\n        for(let j=0; j<this.state.size.width; j++){\n          grid[i][j].index = null;\n        }\n      }\n      //update the state with the grid that has been cleared of the index's\n      this.setState({\n        grid: {\n          grid: grid,\n          height: this.state.grid.height,\n          width: this.state.grid.width\n        }\n      }, () => {\n        resolve(); // resolve the promise once the state has been updated\n      })\n    })\n    \n  }\n  async fetchGrid(){//generate a new maze from the python API using the selected algorithm\n    if (this.state.algorithm){//check that there is an algorithm selected for generating the maze\n      let grid = await fetch(`https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=generate&width=${this.state.size.width}&height=${this.state.size.height}&generate=${this.state.algorithm}`)//fetch the generated grid from the python API\n      grid = await grid.json();//convert the response to json\n      this.setState({//update the state with the new grid\n        grid:grid\n      })\n      this.solved = false;//the maze is no longer solved\n      this.maze = true;//set the maze to true as a maze has been generated\n    }else{//If there is no algorithm selected to generate the maze, alert the user\n      alert(\"Please select a maze generating algorithm\")\n    } \n  }\n  async solveGrid(){//send the maze to the python API to be solved with the requested algorithm\n    await this.clear_node_index();//clear the index of the nodes, as the maze is being solved again\n    if (this.maze && this.state.solve){//check that there is a maze and that there is an algorithm selected for solving the maze\n      let grid = await fetch(\n        `https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=solve&width=${this.state.size.width}&height=${this.state.size.height}&solve=${this.state.solve}&start=${this.state.nodes.start}&end=${this.state.nodes.end}&heuristic=${this.state.heuristic}`, {\n        method: \"POST\",\n        body: JSON.stringify(this.state.grid)//set the body of the request to the grid\n      })//send the maze to the python API to be solved, with the selected algorithm as a parameter\n      grid = await grid.json();//convert the response to json\n      this.setState({//update the state with the new grid\n        grid:grid\n      })\n      this.solved = true;//the maze is now solved\n    }else{\n      if (!this.maze){//if there is no maze, alert the user that there is no maze to solve\n        alert(\"Please generate a maze\")\n      }else{\n        alert(\"Please select a solving algorithm\")//If there is no algorithm selected to solve the maze, alert the user\n      }\n    }\n    \n  }\n  async clearGrid(){//generate an empty maze from the API\n    let grid = await fetch(`https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=empty_maze&width=${this.state.size.width}&height=${this.state.size.height}`)//fetch the empty grid from the python API\n    grid = await grid.json();//convert the response to json\n    this.setState({//update the state\n      grid:grid,//update the state with the new grid\n      nodes:{//set the start and end nodes to default positions\n        start: [0,0],\n        end: [this.state.size.height - 1, this.state.size.width - 1]\n      }\n    })\n    this.maze = false;//there is no longer a maze to solve\n    this.solved = false;//the maze is no longer solved\n  }\n  setAlgorithm(algorithm){//set the maze generating algorithm\n    this.setState({\n      algorithm: algorithm\n    })\n  }\n  setSolve(algorithm){//set the maze solving algorithm\n    this.setState({\n      solve:algorithm\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Menu\n          setAlgorithm={this.setAlgorithm}//callback function to set the generation algorithm from the menu\n          setSolve={this.setSolve}//callback function to set the solving algorithm from the menu\n          generate={this.fetchGrid}//callback function to generate a new maze from the menu\n          clearGrid={this.clearGrid}//callback function to clear the maze from the menu\n          solve={this.solveGrid}//callback function to solve the maze from the menu\n          size={this.state.size}//the size of the maze\n          setSize={this.setSize}//callback function to set the size of the maze from the menu\n          setHeuristic={this.setHeuristic}//callback function to set the heuristic from the menu\n          setSpeed={this.setSpeed}//callback function to set the speed from the menu\n          speed={this.state.speed}//the speed of the maze\n        />\n        <MenuKey />\n        <DisplayGrid\n          grid={this.state.grid}//the grid of the maze\n          nodes={this.state.nodes}//the start and end nodes\n          size={this.state.size}//the size of the maze\n          setStart={this.setStart}//callback function to set the start node\n          setEnd={this.setEnd}//callback function to set the end node\n          generateAlgorithm={this.state.algorithm}//the algorithm used to generate the maze\n          solveAlgorithm={this.state.solve}//the algorithm used to solve the maze\n          heuristic={this.state.heuristic}//the heuristic used for the greedy algorithm\n          speed={this.state.speed}//the speed of the animation\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}