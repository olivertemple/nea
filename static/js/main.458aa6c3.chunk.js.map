{"version":3,"sources":["components/DisplayNode.jsx","components/DisplayGrid.jsx","components/Settings.jsx","components/Menu.jsx","components/MenuKey.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayNode","props","state","style","handelDragStart","bind","handelDragLeave","handelDragOver","handelDrop","this","setDragObject","start","end","setState","pos","e","preventDefault","backgroundColor","classList","draggable","wallLeft","push","wallBottom","type","filter","x","index","animation","animationDelay","className","join","onDragStart","onDrop","onDragOver","onDragLeave","React","Component","DisplayGrid","dragObject","renderTable","setStart","setEnd","Array","from","grid","height","keys","map","_","i","width","j","nodes","padding","Settings","show","value","target","setSize","gap","size","min","onChange","handelSizeChange","onClick","renderSettings","Menu","name","id","setAlgorithm","generate","solve","setSolve","clearGrid","MenuKey","App","algorithm","solved","maze","fetchGrid","solveGrid","should_solve","node","a","clear_node_index","then","Promise","resolve","reject","fetch","json","alert","method","body","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.458aa6c3.chunk.js","sourcesContent":["import React from \"react\"\r\nexport default class DisplayNode extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            style:{}\r\n        }\r\n        this.handelDragStart = this.handelDragStart.bind(this);\r\n        this.handelDragLeave = this.handelDragLeave.bind(this);\r\n        this.handelDragOver = this.handelDragOver.bind(this);\r\n        this.handelDrop = this.handelDrop.bind(this);\r\n    }\r\n    handelDragStart(){//set the type of node that is being dragged\r\n        this.props.setDragObject(this.start ? \"start\" : this.end ? \"end\" : \"\")\r\n    }\r\n    handelDrop(){//move the node that was being dragged to the new position\r\n        this.setState({style:{}});\r\n        this.props.handelDrop(this.props.pos)\r\n    }\r\n\r\n    handelDragOver(e){//when another node is dragged over this node, set the style of the node to be pink\r\n        e.preventDefault();\r\n        this.setState({\r\n            style:{\r\n                backgroundColor:\"pink\"\r\n            }\r\n        })\r\n    }\r\n    handelDragLeave(){//remove the pink style when the node is no longer being dragged over\r\n        this.setState({\r\n            style:{}\r\n        })\r\n    }\r\n    render(){\r\n        //generate a list of css classes for this node\r\n        this.classList = [\"node\"];\r\n        //set default values for the node\r\n        this.draggable = false;\r\n        this.start = false;\r\n        this.end = false;\r\n        //add walls to the node classList\r\n        if (this.props.wallLeft){\r\n            this.classList.push(\"wall_left\")\r\n        }\r\n        if (this.props.wallBottom){\r\n            this.classList.push(\"wall_bottom\")\r\n        }\r\n        //add path to node classList\r\n        if (this.props.type === \"path\"){\r\n            this.classList.push(\"node_path\")\r\n        }else{\r\n            //Remove the \"node_path\" item from the classList if it isn't a path, as when maze is resolved the nodes would remain a path node if it was a path node before.\r\n            this.classList.filter(x => {return x != \"node_path\"})\r\n        }\r\n        //add attributes for the start node\r\n        if (this.props.pos[0] === this.props.start[0] && this.props.pos[1] === this.props.start[1]){\r\n            this.classList.push(\"node_start\")\r\n            this.draggable = true\r\n            this.start = true\r\n        }else{\r\n            this.classList.filter(x => {return x != \"node_start\"})\r\n        }\r\n        //add attributes for the end node\r\n        if (this.props.pos[0] === this.props.end[0] && this.props.pos[1] === this.props.end[1]){\r\n            this.classList.push(\"node_end\")\r\n            this.draggable = true\r\n            this.end=true\r\n        }else{\r\n            this.classList.filter(x => {return x != \"node_end\"})\r\n        }\r\n\r\n        if(this.props.index){\r\n            if (this.props.type != \"path\"){\r\n                this.state.style = {\r\n                    animation: \"visit_node 2s linear forwards\",\r\n                    animationDelay: `${this.props.index*0.1}s`\r\n                }\r\n            }else{\r\n                this.state.style = {\r\n                    animation: \"visit_node_path 2s linear forwards\",\r\n                    animationDelay: `${this.props.index * 0.1}s`\r\n                }\r\n            }\r\n        }else{\r\n            if (!this.state.style.backgroundColor){\r\n                this.state.style = {\r\n                }\r\n            }\r\n        }\r\n        return(\r\n            <td style={this.state.style} className={this.classList.join(\" \")} draggable={this.draggable} onDragStart={this.handelDragStart} onDrop={this.handelDrop} onDragOver={this.handelDragOver} onDragLeave={this.handelDragLeave}>\r\n            </td>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React, { Component } from \"react\";\r\nimport DisplayNode from \"./DisplayNode\";\r\nexport default class DisplayGrid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dragObject: \"\"\r\n        }\r\n        this.renderTable = this.renderTable.bind(this);\r\n        this.handelDrop = this.handelDrop.bind(this);\r\n        this.setDragObject = this.setDragObject.bind(this);\r\n    }\r\n    handelDrop(pos){//move the node that was being dragged to the new position\r\n        switch (this.state.dragObject){\r\n            case \"start\":\r\n                this.props.setStart(pos)\r\n                break;\r\n            case \"end\":\r\n                this.props.setEnd(pos)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    setDragObject(type){//set weather start or end node is being dragged\r\n        this.setState({\r\n            dragObject:type\r\n        })\r\n    }\r\n    renderTable(){//render the grid as a table\r\n        return(\r\n            <table>\r\n                <tbody className=\"column\">\r\n                    {Array.from(Array(this.props.grid.height).keys()).map((_, i) => {\r\n                        return(\r\n                                <tr className={`row wall_right ${i === 0 ? \"wall_top\" : \"\"}`} key={i}>\r\n                                    {Array.from(Array(this.props.grid.width).keys()).map((_, j) => {\r\n                                        return(\r\n                                            <DisplayNode key={j} wallLeft={this.props.grid.grid[i][j].wallLeft} wallBottom={this.props.grid.grid[i][j].wallBottom} pos={[i, j]} start={this.props.nodes.start} handelDrop = {this.handelDrop} end={this.props.nodes.end} setDragObject={this.setDragObject} type={this.props.grid.grid[i][j].type} index={this.props.grid.grid[i][j].index}/>\r\n                                        )\r\n                                    })}\r\n                                </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n        \r\n    }\r\n    render(){\r\n        if (this.props.grid){\r\n            return(\r\n                <div className=\"grid\" style={{padding:10}}>\r\n                    <this.renderTable />\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"grid\"></div>\r\n            )\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nexport default class Settings extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n    handelSizeChange(e){//set the size of the grid when it is changed in the settings\r\n        let value = e.target.value;\r\n        this.props.setSize({height:value, width:value})\r\n    }\r\n    renderSettings(){//render the settings dropdown menu\r\n        return(\r\n            <div className=\"settings_container\">\r\n                <div className=\"row\" style={{gap:10}}>\r\n                    <p>Size</p>\r\n                    <input className=\"text_input\" type=\"number\" value={this.props.size.height} min={1} onChange={e => this.handelSizeChange(e)}/>\r\n                </div>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <button className=\"button settings\" onClick={() => {this.setState({show:!this.state.show})}}>Settings</button>\r\n                {\r\n                    //show the settings dropdown menu if the button is clicked\r\n                    this.state.show ? this.renderSettings() : null \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Settings from './Settings';\r\nexport default class Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"menu\">\r\n                <Settings size={this.props.size} setSize={this.props.setSize}></Settings>\r\n                <select className=\"algorithms\" name=\"algorithms\" id=\"algorithms\" onChange={(e) => {this.props.setAlgorithm(e.target.value)}}>\r\n                    <option value=\"select\">Select Generating Algorithm</option>\r\n                    <option value=\"prims\">Prims</option>\r\n                    <option value=\"recursive_backtracking\">recursive backtracking</option>\r\n                </select>\r\n                <button className=\"button\" onClick={this.props.generate}>Generate</button>\r\n                <button className=\"button\" onClick={this.props.solve}>Solve</button>\r\n                <select className=\"algorithms\" name=\"algorithms\" id=\"algorithms\" onChange={(e) => {this.props.setSolve(e.target.value)}}>\r\n                    <option value=\"select\">Select Solving Algorithm</option>\r\n                    <option value=\"dijkstra\">Dijkstra</option>\r\n                    <option value=\"dfs\">Depth First Search</option>\r\n                    <option value=\"bfs\">Breadth First Search</option>\r\n                    <option value=\"greedy\">Greedy</option>\r\n                </select>\r\n                <button className=\"button clear\" onClick={this.props.clearGrid}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class MenuKey extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"key\">\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_start\"></div>\r\n                    <p>Start Node</p>\r\n                </div>\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_end\"></div>\r\n                    <p>Finish Node</p>\r\n                </div>\r\n                <div className=\"key_item\">\r\n                    <div className=\"key_node_via-point\"></div>\r\n                    <p>Via Point</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import './App.css';\nimport { Component } from 'react';\nimport DisplayGrid from './components/DisplayGrid';\nimport Menu from './components/Menu';\nimport MenuKey from './components/MenuKey';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      grid: null,\n      algorithm: null,\n      solve:null,\n      nodes:{\n        start: [0,0],\n        end: [null, null]\n      },\n      size: {\n        width:15,\n        height:15\n      }\n    }\n\n    this.solved = false;\n    this.maze = false;\n    this.fetchGrid = this.fetchGrid.bind(this);\n    this.setAlgorithm = this.setAlgorithm.bind(this);\n    this.clearGrid = this.clearGrid.bind(this);\n    this.setSolve = this.setSolve.bind(this);\n    this.solveGrid = this.solveGrid.bind(this);\n    this.setSize = this.setSize.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.should_solve = this.should_solve.bind(this);\n  }\n  componentDidMount(){\n    this.clearGrid();\n  }\n  setSize(size){//set the size of the grid when changed in settings\n    this.setState({\n      size: size\n    }, () => {\n      if (size.width > 0 && size.height > 0){\n        this.clearGrid();\n      }\n    })\n  }\n  setStart(node){//set the start node\n    this.setState({\n      nodes:{\n        start: node,\n        end: this.state.nodes.end\n      }\n    }, () => {\n      this.should_solve()\n    })\n  }\n  setEnd(node){//set the end node\n    this.setState({\n      nodes:{\n        start: this.state.nodes.start,\n        end: node\n      }\n    }, () => {\n      this.should_solve()\n    })\n  }\n  async should_solve(){//if the maze is already solved, then solve again. Only run when the start or end nodes are changed\n    if (this.solved){\n      this.clear_node_index().then(() => {\n        this.solveGrid();\n      })\n    }\n  }\n\n  async clear_node_index(){\n    return new Promise((resolve, reject) => {\n      let grid = this.state.grid.grid\n      for (let i=0; i<this.state.size.height; i++){\n        for(let j=0; j<this.state.size.width; j++){\n          grid[i][j].index = null;\n        }\n      }\n\n      this.setState({\n        grid: {\n          grid: grid,\n          height: this.state.grid.height,\n          width: this.state.grid.width\n        }\n      }, () => {\n        resolve();\n      })\n    })\n    \n  }\n  async fetchGrid(){//generate a new maze from the python API using the selected algorithm\n    if (this.state.algorithm){\n      let grid = await fetch(\"https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=generate&width=\"+this.state.size.width+\"&height=\"+this.state.size.height+\"&generate=\"+this.state.algorithm)\n      grid = await grid.json();\n      this.setState({\n        grid:grid\n      })\n      this.solved = false;\n      this.maze = true;\n    }else{\n      alert(\"Please select a maze generating algorithm\")\n    } \n  }\n  async solveGrid(){//send the maze to the python API to be solved with the requested algorithm\n    await this.clear_node_index();\n    if (this.maze && this.state.solve){\n      let grid = await fetch(\n        \"https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=solve&width=\"+this.state.size.width+\"&height=\"+this.state.size.height+\"&solve=\"+this.state.solve+\"&start=\"+this.state.nodes.start+\"&end=\"+this.state.nodes.end, {\n        method: \"POST\",\n        body: JSON.stringify(this.state.grid)\n      })\n      grid = await grid.json();\n      this.setState({\n        grid:grid\n      })\n      this.solved = true;\n    }else{\n      if (!this.maze){\n        alert(\"Please generate a maze\")\n      }else{\n        alert(\"Please select a solving algorithm\")\n      }\n    }\n    \n  }\n  async clearGrid(){//generate an empty maze from the API\n    let grid = await fetch(\"https://jkrlv64tsl.execute-api.eu-west-2.amazonaws.com/default/NEA?type=empty_maze&width=\"+this.state.size.width+\"&height=\"+this.state.size.height)\n    grid = await grid.json();\n    this.setState({\n      grid:grid,\n      nodes:{\n        start: [0,0],\n        end: [this.state.size.height - 1, this.state.size.width - 1]\n      }\n    })\n    this.maze = false;\n    this.solved = false;\n  }\n  setAlgorithm(algorithm){//set the maze generating algorithm\n    this.setState({\n      algorithm: algorithm\n    })\n  }\n  setSolve(algorithm){//set the maze solving algorithm\n    this.setState({\n      solve:algorithm\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Menu setAlgorithm={this.setAlgorithm} setSolve={this.setSolve} generate={this.fetchGrid} clearGrid={this.clearGrid} solve={this.solveGrid} size={this.state.size} setSize={this.setSize}/>\n        <MenuKey />\n        <DisplayGrid grid={this.state.grid} nodes={this.state.nodes} size={this.state.size} setStart={this.setStart} setEnd={this.setEnd}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}